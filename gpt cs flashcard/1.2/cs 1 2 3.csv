"What is the software development life cycle (SDLC)?","A series of phases that guide the development of software from planning to maintenance."
"What are the typical stages of the SDLC?","Analysis, Design, Implementation, Testing, Evaluation, Maintenance."
"What is the analysis stage?","Understanding the problem, gathering requirements, identifying inputs, outputs, processing."
"✅/❌ Analysis stage","✅ Defines scope clearly / ❌ Time-consuming if requirements are unclear."
"What is the design stage?","Plans how the software will work — algorithms, UI, data structures, flowcharts, pseudocode."
"✅/❌ Design stage","✅ Helps plan structure and logic / ❌ Poor design can cause issues in implementation."
"What is the implementation stage?","Actual writing of the program code using a suitable programming language."
"✅/❌ Implementation stage","✅ Brings design to life / ❌ Bugs or poor code may reduce maintainability."
"What is testing in SDLC?","Checking that the software meets requirements and is free from errors."
"Types of testing?","White box, Black box, Alpha, Beta."
"What is white box testing?","Tests internal logic and code paths. Requires knowledge of code."
"What is black box testing?","Tests software functionality without knowledge of internal code."
"What is alpha testing?","Performed by developers or in-house testers during development."
"What is beta testing?","Performed by end users in real environments before final release."
"What is the evaluation stage?","Reviews how well the software meets original goals. Considers efficiency, usability, etc."
"What is maintenance in SDLC?","Ongoing changes made after deployment: bug fixes, updates, performance improvements."
"What are the types of maintenance?","Corrective (fix bugs), Adaptive (environment changes), Perfective (improve performance/features)."
"What is a waterfall model?","Linear development model where each phase is completed before moving to the next."
"✅/❌ Waterfall model","✅ Simple, easy to manage / ❌ Rigid, hard to go back to previous stage."
"What is an agile model?","Iterative development with constant feedback and user involvement."
"✅/❌ Agile model","✅ Flexible, user-focused / ❌ Hard to manage large teams or projects."
"What is a spiral model?","Combines iterative design with risk assessment in each loop."
"✅/❌ Spiral model","✅ Manages risk, flexible / ❌ Expensive, complex to manage."
"What is a prototype model?","Builds an early version of the software to gather feedback."
"✅/❌ Prototype model","✅ Helps refine requirements / ❌ May set unrealistic user expectations."
"What is a RAD (Rapid Application Development) model?","Focuses on rapid prototyping with frequent iterations and feedback."
"✅/❌ RAD model","✅ Fast, user involvement / ❌ May reduce quality or structure."
"What is a requirements specification?","Detailed document listing what the software must do and constraints."
"✅/❌ Requirements specification","✅ Guides development clearly / ❌ Inaccurate specs cause major issues later."
"What is pseudocode?","Structured English-like way of planning code logic."
"✅/❌ Pseudocode","✅ Easy to understand / ❌ No strict syntax, varies by person."
"What are flowcharts?","Diagrams showing steps in a process or algorithm using symbols."
"✅/❌ Flowcharts","✅ Visual clarity / ❌ Hard to update complex ones."
"What are structure charts?","Break down a system into modules showing hierarchy and flow."
"✅/❌ Structure charts","✅ Good modular design / ❌ Can become too abstract."
"What is modularity in programming?","Dividing software into independent modules or components."
"✅/❌ Modularity","✅ Easier maintenance, reusable / ❌ Complex interactions between modules."
"What is top-down design?","Breaking a problem into smaller sub-problems until manageable steps are formed."
"✅/❌ Top-down design","✅ Simplifies problem-solving / ❌ May miss low-level implementation challenges."
"What is stepwise refinement?","Breaking down each task into smaller and smaller parts for detail and clarity."
"✅/❌ Stepwise refinement","✅ Precise control / ❌ Can overcomplicate."
"What is validation in development?","Checking that software meets user requirements."
"What is verification in development?","Checking that software is built correctly to design specs."
"What is defensive design?","Designing programs to anticipate and handle misuse or errors."
"Methods of defensive design?","Input validation, authentication, maintainability, meaningful messages."
"What is input validation?","Ensures user inputs are valid before use (e.g., range, type checks)."
"What is authentication?","Confirming a user's identity before granting access."
"What improves maintainability?","Meaningful identifiers, indentation, comments, modularity."
"Why use meaningful identifiers?","Improves code readability and understanding."
"Why use comments and indentation?","Makes code easier to read, debug, and maintain."
"What is reusable code?","Code that can be used in multiple programs without rewriting."
"Benefits of reusable code?","Saves time, consistent, tested."
"What is a subroutine?","A named block of code designed to perform a specific task."
"Difference between procedure and function?","Function returns a value; procedure does not."
"✅/❌ Subroutines","✅ Reusable, structured / ❌ May add overhead."
"What is a trace table?","A tool used to manually follow logic and track variable values."
"What is dry run testing?","Manually walking through code to find logical errors."
"What is erroneous data?","Invalid input data that should be rejected."
"What is extreme data?","Data at the boundaries of valid input."
"What is normal data?","Valid data that should be processed normally."
"What are test plans?","Documented testing procedures, inputs, expected outcomes."
"What is alpha vs beta testing?","Alpha = in-house by devs; Beta = by external users in real conditions."
"What is regression testing?","Retesting after changes to ensure previous functionality still works."
"What is black box vs white box testing?","Black box = test outputs only; White box = test internal logic."
"Why is documentation important?","Helps future developers understand, use, and maintain code."